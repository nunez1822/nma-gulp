{"version":3,"sources":["admin/admin.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAUA;gBAEE,sBAAqB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;gBAAG,CAAC;gBAEnC,sBAAmB,4BAAY;yBAA/B,cAA2C,MAAM,CAAC,oDAAoD,CAAA,CAAA,CAAC;;;mBAAA;;gBAEvG,kCAAW,GAAX;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC;yBACnC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBAChC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACxC,CAAC;gBAEO,kCAAW,GAAnB,UAAqB,KAAU;oBAC7B,oEAAoE;oBACpE,8DAA8D;oBAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;oBAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAClC,CAAC;gBApBH;oBAAC,iBAAU,EAAE;;gCAAA;gBAqBb,mBAAC;YAAD,CApBA,AAoBC,IAAA;YApBD,uCAoBC,CAAA","file":"app/admin/admin.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable }     from 'rxjs/Observable';\r\nimport { Headers, RequestOptions } from '@angular/http';\r\n\r\nimport {ContactForm} from './../contact/contactForm';\r\n\r\ndeclare var firebase: any;\r\n\r\n@Injectable()\r\nexport class AdminService {\r\n\r\n  constructor (private http: Http) {}\r\n\r\n  private static get CONTACTS_URL(): string {return 'https://nma-app-b2ca8.firebaseio.com/contacts.json'} ;  // URL to web API\r\n\r\n  getContacts(): Observable<ContactForm[]> {\r\n      return this.http.get(AdminService.CONTACTS_URL)\r\n                 .map(response => response.json())\r\n                 .catch(this.handleError);\r\n  }\r\n\r\n  private handleError (error: any) {\r\n    // In a real world app, we might use a remote logging infrastructure\r\n    // We'd also dig deeper into the error to get a better message\r\n    let errMsg = (error.message) ? error.message :\r\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n    console.error(errMsg); // log to console instead\r\n    return Observable.throw(errMsg);\r\n  }\r\n}"],"sourceRoot":"/source/"}