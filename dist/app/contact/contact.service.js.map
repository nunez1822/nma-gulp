{"version":3,"sources":["contact/contact.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAEE,wBAAqB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;gBAAG,CAAC;gBAEnC,sBAAmB,8BAAY;yBAA/B,cAA2C,MAAM,CAAC,oDAAoD,CAAA,CAAA,CAAC;;;mBAAA;;gBAEvG,mCAAU,GAAV,UAAW,QAAa;oBACtB,IAAI,IAAI,GAAG,QAAQ,CAAC;oBACpB,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;oBAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;oBAEvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,IAAI,EAAE,OAAO,CAAC;yBAChD,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBAChC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC3C,CAAC;gBAEO,oCAAW,GAAnB,UAAqB,KAAU;oBAC7B,oEAAoE;oBACpE,8DAA8D;oBAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;oBAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAClC,CAAC;gBAxBH;oBAAC,iBAAU,EAAE;;kCAAA;gBAyBb,qBAAC;YAAD,CAxBA,AAwBC,IAAA;YAxBD,2CAwBC,CAAA","file":"app/contact/contact.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable }     from 'rxjs/Observable';\r\nimport { Headers, RequestOptions } from '@angular/http';\r\n\r\nimport {ContactForm} from './contactForm';\r\n\r\n@Injectable()\r\nexport class ContactService {\r\n\r\n  constructor (private http: Http) {}\r\n\r\n  private static get CONTACTS_URL(): string {return 'https://nma-app-b2ca8.firebaseio.com/contacts.json'} ;  // URL to web API\r\n\r\n  addContact(contact1: any): Observable<ContactForm> {\r\n    let body = contact1;\r\n    let headers = new Headers({ 'Content-Type': 'application/json' });\r\n    let options = new RequestOptions({ headers: headers });\r\n\r\n    return this.http.post(ContactService.CONTACTS_URL, body, options)\r\n                    .map(response => response.json())\r\n                    .catch(this.handleError);\r\n  }\r\n\r\n  private handleError (error: any) {\r\n    // In a real world app, we might use a remote logging infrastructure\r\n    // We'd also dig deeper into the error to get a better message\r\n    let errMsg = (error.message) ? error.message :\r\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n    console.error(errMsg); // log to console instead\r\n    return Observable.throw(errMsg);\r\n  }\r\n}"],"sourceRoot":"/source/"}